// Generated by Dagger (https://dagger.dev).
package ir.barook.todonote.di;

import android.app.Application;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import ir.barook.todonote.data.TaskDatabase;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDatabaseFactory implements Factory<TaskDatabase> {
  private final Provider<Application> appProvider;

  private final Provider<TaskDatabase.Callback> callBackProvider;

  public AppModule_ProvideDatabaseFactory(Provider<Application> appProvider,
      Provider<TaskDatabase.Callback> callBackProvider) {
    this.appProvider = appProvider;
    this.callBackProvider = callBackProvider;
  }

  @Override
  public TaskDatabase get() {
    return provideDatabase(appProvider.get(), callBackProvider.get());
  }

  public static AppModule_ProvideDatabaseFactory create(Provider<Application> appProvider,
      Provider<TaskDatabase.Callback> callBackProvider) {
    return new AppModule_ProvideDatabaseFactory(appProvider, callBackProvider);
  }

  public static TaskDatabase provideDatabase(Application app, TaskDatabase.Callback callBack) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideDatabase(app, callBack));
  }
}
